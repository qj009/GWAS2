for(i in 1: length(T.Name.All)){
T.Name <- T.Name.All[i]
print(paste0("pheno type is ",T.Name))
# Example SNP data (replace this with your own SNP data)
snp <-read_tsv(paste0(input_path_snp,T.Name,".F",test,".SNP",other_ruls_snp,"_map.tsv"))
colnames(snp) <- c("CHROM","POS","P","ID")
#snp$CHROM <- paste0("chr",snp$CHROM)
snp_plot <- snp[which(snp$P!=0),]
# set.seed(2023)
# jagger_snp <- runif(nrow(snp), 1e-9,1e-8)
# snp_plot$P <- snp_plot$P + jagger_snp
snp_plot <- snp_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
snp_data_cum <- snp_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(POS)) %>%
mutate(bp_add = lag(cumsum(max_bp), default = 0)) %>%
dplyr::select(CHROM, bp_add)
snp_plot <- snp_plot %>%
inner_join(snp_data_cum, by = "CHROM") %>%
mutate(POS_cum = POS + bp_add)
snp_plot_sub <- snp_plot[which(snp_plot$CHROM %in% c(1,2)),]
# Example di-snp data (replace this with your own interval data)
hapi <- read_tsv(paste0(input_path_hap,T.Name,".F",test,".HAP.Initial",other_ruls_hap,"_map.tsv"))
hapi_plot <- hapi %>% dplyr::select(chr, start,end, p)
colnames(hapi_plot) <- c("CHROM","START","END","P")
#hapi_plot$CHROM <- paste0("chr",hapi_plot$CHROM)
hapi_plot <- hapi_plot[which(hapi_plot$P!=0),]
# set.seed(2022)
# jagger_disnp <- runif(nrow(hapi_plot), 1e-9,1e-8)
# hapi_plot$P <- hapi_plot$P + jagger_disnp
hapi_plot <- hapi_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
hapi_data_cum <- hapi_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(END)) %>%
mutate(bp_add = lag(cumsum(max_bp),default = 0)) %>%
dplyr::select(CHROM, bp_add)
hapi_plot <- hapi_plot %>%
inner_join(hapi_data_cum, by = "CHROM") %>%
mutate(START_cum = START + bp_add, END_cum = END + bp_add)
hapi_plot_sub <- hapi_plot[which(hapi_plot$CHROM %in% c(1,2)),]
#haplotype
hap <- read_tsv(paste0(input_path_hap,T.Name,".F",test,".HAP.FINAL",other_ruls_hap,"_map.tsv"))
hap_plot <- hap %>% dplyr::select(chr, start,end, p)
colnames(hap_plot) <- c("CHROM","START","END","P")
#hap_plot$CHROM <- paste0("chr",hap_plot$CHROM)
hap_plot <- hap_plot[which(hap_plot$P!=0),]
hap_plot <- hap_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
hap_data_cum <- hap_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(END)) %>%
mutate(bp_add = lag(cumsum(max_bp),default = 0)) %>%
dplyr::select(CHROM, bp_add)
hap_plot <- hap_plot %>%
inner_join(hap_data_cum, by = "CHROM") %>%
mutate(START_cum = START + bp_add, END_cum = END + bp_add)
hap_plot_sub <- hap_plot[which(hap_plot$CHROM %in% c(1,2)),]
# Calculate midpoints for chromosome regions
# axis_set <- snp_plot_sub |>
#   group_by(CHROM) |>
#   dplyr::summarize(center = mean(POS_cum))
axis_set <- snp_plot |>
group_by(CHROM) |>
dplyr::summarize(center = mean(POS_cum))
axis_sep <- snp_plot %>% group_by(CHROM) %>% dplyr::summarize(boundaries  = max(POS_cum))
# Create Manhattan plot with SNPs and intervals
#
p <- ggplot() +
# snp sig
geom_point(data = snp_plot %>% filter(sig=="sig"), aes(x = POS_cum, y = -log10(P),color = "SNP"), size = 8, alpha = 0.8,show.legend=TRUE) +
# snp no sig
geom_point(data = snp_plot %>% filter(sig=="nosig"), aes(x = POS_cum, y = -log10(P),color = "SNP"), size = 1, alpha = 0.3,show.legend	=TRUE) +
# di-SNP sig
geom_segment(data = hapi_plot %>% filter(sig=="sig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "di-SNP"), lineend = "round",linewidth = 5,show.legend	=TRUE) +
# di-SNP nosig
geom_segment(data = hapi_plot %>% filter(sig=="nosig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "di-SNP"), lineend = "round",linewidth = 1, alpha = 0.3,show.legend	=TRUE) +
# hap sig
geom_segment(data = hap_plot %>% filter(sig=="sig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "Haplotype"), lineend = "round",linewidth = 3,show.legend	=TRUE) +
# hap no sig
geom_segment(data = hap_plot %>% filter(sig=="nosig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "Haplotype"), lineend = "round",linewidth = 1,alpha = 0.3,show.legend	=TRUE) +
# add significant line
geom_hline(
yintercept = -log10(sig_line), color = "red",
linetype = "dashed") +
# add chromosome separation line
geom_vline(
xintercept = axis_sep$boundaries, color = "grey",
linetype = "dotted", alpha = 0.5) +
# add x-axis lable
scale_x_continuous(label = paste0("chr",axis_set$CHROM),breaks = axis_set$center) +
# set ylim
scale_y_continuous(expand = c(0, 0), limits = c(0, ylim)) +
# add legend
scale_color_manual(breaks = c("SNP", "di-SNP", "Haplotype"),values = c("#93b5cf", "#ffa60f","#f03752"), name = "Data Type") +
# add plot title
ggtitle(paste0("Manhattan plot of SNP, di-SNP, Haplotype of ", T.Name)) +
# add x and y title
labs(x = "Chromsome", y = expression(-log[10]*P)) +
theme_minimal() +
theme(
plot.title = element_text(size = 20,hjust = 0.5),
axis.text.x = element_text(angle = 60, size = 15, vjust = 0.7),
axis.text.y = element_text(size = 15),
axis.title = element_text(size=20),
axis.line = element_line(linewidth = 0.8),
axis.ticks = element_line(linewidth = 0.8),
legend.position = "bottom",
legend.title = element_text(size=15),
legend.text = element_text(size=15),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
# save the file
pdf(paste0(output_path_all,T.Name,".F",test,".SNP.HAPI.HAP_manhattan_clear.pdf"), height=5, width=10);
print(p);
dev.off();
}
#' GWAS visualization function: vis
#' @description
#'
#' @details
#' Input file p value column should not contain missing value and 0. If the original p value is 0 (which is too small to calculate by the software), please compute p value manually or set a standard small p value for plot the figure.
#'
#' @param T.Name:
#' @param snp_file:
#' @param hapi_file:
#' @param hap_file:
#' @param delim:
#' @param sig_line:
#' @returns:
#' @keywords
#' @export
#' @examples
#'
vis <- function(T.Name, snp_file, hapi_file, hap_file, delim = "\t", sig_line=5e-08, ylim,
snp_sig_size = 8, snp_sig_alpha = 0.8, snp_nosig_size=1, snp_no_sig_alpha=0.3,
hapi_sig_lineend="round", hapi_sig_linewidth=5,hapi_sig_alpha = 1,
hapi_nosig_lineend="round", hapi_nosig_linewidth=1,hapi_nosig_alpha =0.3,
hap_sig_lineend="round", hap_sig_linewidth=3,hap_sig_alpha = 1,
hap_nosig_lineend="round", hap_nosig_linewidth=1,hap_nosig_alpha =0.3,
snp_color = "#93b5cf", hapi_color= "#ffa60f", hap_color = "#f03752"){
print(paste0("pheno type is ",T.Name))
# Example SNP data (replace this with your own SNP data)
snp <-read_delim(snp_file,delim = delim)
colnames(snp) <- c("CHROM","POS","P","ID")
snp_plot <- snp[which(snp$P!=0),]
snp_plot <- snp_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
snp_data_cum <- snp_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(POS)) %>%
mutate(bp_add = lag(cumsum(max_bp), default = 0)) %>%
dplyr::select(CHROM, bp_add)
snp_plot <- snp_plot %>%
inner_join(snp_data_cum, by = "CHROM") %>%
mutate(POS_cum = POS + bp_add)
snp_plot_sub <- snp_plot[which(snp_plot$CHROM %in% c(1,2)),]
# Example di-snp data (replace this with your own interval data)
hapi <- read_delim(hapi_file,delim = delim)
hapi_plot <- hapi %>% dplyr::select(chr, start,end, p)
colnames(hapi_plot) <- c("CHROM","START","END","P")
#hapi_plot$CHROM <- paste0("chr",hapi_plot$CHROM)
hapi_plot <- hapi_plot[which(hapi_plot$P!=0),]
# set.seed(2022)
# jagger_disnp <- runif(nrow(hapi_plot), 1e-9,1e-8)
# hapi_plot$P <- hapi_plot$P + jagger_disnp
hapi_plot <- hapi_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
hapi_data_cum <- hapi_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(END)) %>%
mutate(bp_add = lag(cumsum(max_bp),default = 0)) %>%
dplyr::select(CHROM, bp_add)
hapi_plot <- hapi_plot %>%
inner_join(hapi_data_cum, by = "CHROM") %>%
mutate(START_cum = START + bp_add, END_cum = END + bp_add)
hapi_plot_sub <- hapi_plot[which(hapi_plot$CHROM %in% c(1,2)),]
#haplotype
hap <- read_delim(hap_file,delim = delim)
hap_plot <- hap %>% dplyr::select(chr, start,end, p)
colnames(hap_plot) <- c("CHROM","START","END","P")
#hap_plot$CHROM <- paste0("chr",hap_plot$CHROM)
hap_plot <- hap_plot[which(hap_plot$P!=0),]
hap_plot <- hap_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
hap_data_cum <- hap_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(END)) %>%
mutate(bp_add = lag(cumsum(max_bp),default = 0)) %>%
dplyr::select(CHROM, bp_add)
hap_plot <- hap_plot %>%
inner_join(hap_data_cum, by = "CHROM") %>%
mutate(START_cum = START + bp_add, END_cum = END + bp_add)
hap_plot_sub <- hap_plot[which(hap_plot$CHROM %in% c(1,2)),]
# Calculate midpoints for chromosome regions
axis_set <- snp_plot %>%
group_by(CHROM) %>%
dplyr::summarize(center = mean(POS_cum))
# Cacluate chromsome bountries
axis_sep <- snp_plot %>% group_by(CHROM) %>% dplyr::summarize(boundaries  = max(POS_cum))
# Create Manhattan plot with SNPs and intervals
#
p <- ggplot() +
# snp sig
geom_point(data = snp_plot %>% filter(sig=="sig"), aes(x = POS_cum, y = -log10(P),color = "SNP"), size = snp_sig_size, alpha = snp_sig_alpha,show.legend=TRUE) +
# snp no sig
geom_point(data = snp_plot %>% filter(sig=="nosig"), aes(x = POS_cum, y = -log10(P),color = "SNP"), size = snp_nosig_size, alpha = snp_no_sig_alpha,show.legend	=TRUE) +
# di-SNP sig
geom_segment(data = hapi_plot %>% filter(sig=="sig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "di-SNP"), lineend = hapi_sig_lineend, linewidth= hapi_sig_linewidth,alpha = hapi_sig_alpha,show.legend	=TRUE) +
# di-SNP nosig
geom_segment(data = hapi_plot %>% filter(sig=="nosig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "di-SNP"), lineend = hapi_nosig_lineend,linewidth = hapi_nosig_linewidth, alpha = hapi_nosig_alpha,show.legend	=TRUE) +
# hap sig
geom_segment(data = hap_plot %>% filter(sig=="sig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "Haplotype"), lineend = hap_sig_lineend,linewidth = hap_sig_linewidth,alpha = hap_sig_alpha, show.legend	=TRUE) +
# hap no sig
geom_segment(data = hap_plot %>% filter(sig=="nosig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "Haplotype"), lineend = hap_nosig_lineend,linewidth = hap_nosig_linewidth,alpha = hap_nosig_alpha,show.legend	=TRUE) +
# add significant line
geom_hline(
yintercept = -log10(sig_line), color = "red",
linetype = "dashed") +
# add chromosome separation line
geom_vline(
xintercept = axis_sep$boundaries, color = "grey",
linetype = "dotted", alpha = 0.5) +
# add x-axis label
scale_x_continuous(label = paste0("chr",axis_set$CHROM),breaks = axis_set$center) +
# set ylim
scale_y_continuous(expand = c(0, 0), limits = c(0, ylim)) +
# add legend
scale_color_manual(breaks = c("SNP", "di-SNP", "Haplotype"),values = c(snp_color, hapi_color,hap_color), name = "Data Type") +
# add plot title
ggtitle(paste0("Manhattan plot of SNP, di-SNP, Haplotype of ", T.Name)) +
# add x and y title
labs(x = "Chromsome", y = expression(-log[10]*P)) +
theme_minimal()
return(p)
}
rm(list=ls())
dir<-"/Users/zswx/Documents/UCR/Jialab/GWAS2/"
setwd(dir)
library(MASS)
library(plyr)
library(dplyr)
library(tidyverse)
library(data.table)
library(ggpubr)
T.Name <- "LD"
test <- "WALD"
input_path_snp="data/arabidopsis/"
#output_path_snp="data/UCR_maize/original_Random_SNP_new/"
other_ruls_snp="_new"
input_path_hap="data/arabidopsis/"
#output_path_hap="data/UCR_maize/original_Random/"
output_path_all="data/arabidopsis/Random_newSNP_hap/"
other_ruls_hap=""
snp_file = paste0(input_path_snp,T.Name,".F",test,".SNP",other_ruls_snp,"_map.tsv")
hapi_file = paste0(input_path_hap,T.Name,".F",test,".HAP.Initial",other_ruls_hap,"_map.tsv")
hap_file = paste0(input_path_hap,T.Name,".F",test,".HAP.FINAL",other_ruls_hap,"_map.tsv")
sig_line <- 0.00000303561084131042
ylim<-9
p <- vis(T.Name, snp_file, hapi_file, hap_file, delim = "\t", sig_line=sig_line, ylim = ylim)
vis <- function(T.Name, snp_file, hapi_file, hap_file, delim = "\t", sig_line=5e-08, ylim,
snp_sig_size = 8, snp_sig_alpha = 0.8, snp_nosig_size=1, snp_no_sig_alpha=0.3,
hapi_sig_lineend="round", hapi_sig_linewidth=5,hapi_sig_alpha = 1,
hapi_nosig_lineend="round", hapi_nosig_linewidth=1,hapi_nosig_alpha =0.3,
hap_sig_lineend="round", hap_sig_linewidth=3,hap_sig_alpha = 1,
hap_nosig_lineend="round", hap_nosig_linewidth=1,hap_nosig_alpha =0.3,
snp_color = "#93b5cf", hapi_color= "#ffa60f", hap_color = "#f03752"){
print(paste0("pheno type is ",T.Name))
# Example SNP data (replace this with your own SNP data)
snp <-read_delim(snp_file,delim = delim)
colnames(snp) <- c("CHROM","POS","P","ID")
snp_plot <- snp[which(snp$P!=0),]
snp_plot <- snp_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
snp_data_cum <- snp_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(POS)) %>%
mutate(bp_add = lag(cumsum(max_bp), default = 0)) %>%
dplyr::select(CHROM, bp_add)
snp_plot <- snp_plot %>%
inner_join(snp_data_cum, by = "CHROM") %>%
mutate(POS_cum = POS + bp_add)
snp_plot_sub <- snp_plot[which(snp_plot$CHROM %in% c(1,2)),]
# Example di-snp data (replace this with your own interval data)
hapi <- read_delim(hapi_file,delim = delim)
hapi_plot <- hapi %>% dplyr::select(chr, start,end, p)
colnames(hapi_plot) <- c("CHROM","START","END","P")
#hapi_plot$CHROM <- paste0("chr",hapi_plot$CHROM)
hapi_plot <- hapi_plot[which(hapi_plot$P!=0),]
# set.seed(2022)
# jagger_disnp <- runif(nrow(hapi_plot), 1e-9,1e-8)
# hapi_plot$P <- hapi_plot$P + jagger_disnp
hapi_plot <- hapi_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
hapi_data_cum <- hapi_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(END)) %>%
mutate(bp_add = lag(cumsum(max_bp),default = 0)) %>%
dplyr::select(CHROM, bp_add)
hapi_plot <- hapi_plot %>%
inner_join(hapi_data_cum, by = "CHROM") %>%
mutate(START_cum = START + bp_add, END_cum = END + bp_add)
hapi_plot_sub <- hapi_plot[which(hapi_plot$CHROM %in% c(1,2)),]
#haplotype
hap <- read_delim(hap_file,delim = delim)
hap_plot <- hap %>% dplyr::select(chr, start,end, p)
colnames(hap_plot) <- c("CHROM","START","END","P")
#hap_plot$CHROM <- paste0("chr",hap_plot$CHROM)
hap_plot <- hap_plot[which(hap_plot$P!=0),]
hap_plot <- hap_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
hap_data_cum <- hap_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(END)) %>%
mutate(bp_add = lag(cumsum(max_bp),default = 0)) %>%
dplyr::select(CHROM, bp_add)
hap_plot <- hap_plot %>%
inner_join(hap_data_cum, by = "CHROM") %>%
mutate(START_cum = START + bp_add, END_cum = END + bp_add)
hap_plot_sub <- hap_plot[which(hap_plot$CHROM %in% c(1,2)),]
# Calculate midpoints for chromosome regions
axis_set <- snp_plot %>%
group_by(CHROM) %>%
dplyr::summarize(center = mean(POS_cum))
# Cacluate chromsome bountries
axis_sep <- snp_plot %>% group_by(CHROM) %>% dplyr::summarize(boundaries  = max(POS_cum))
# Create Manhattan plot with SNPs and intervals
#
p <- ggplot() +
# snp sig
geom_point(data = snp_plot %>% filter(sig=="sig"), aes(x = POS_cum, y = -log10(P),color = "SNP"), size = snp_sig_size, alpha = snp_sig_alpha,show.legend=TRUE) +
# snp no sig
geom_point(data = snp_plot %>% filter(sig=="nosig"), aes(x = POS_cum, y = -log10(P),color = "SNP"), size = snp_nosig_size, alpha = snp_no_sig_alpha,show.legend	=TRUE) +
# di-SNP sig
geom_segment(data = hapi_plot %>% filter(sig=="sig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "di-SNP"), lineend = hapi_sig_lineend, linewidth= hapi_sig_linewidth,alpha = hapi_sig_alpha,show.legend	=TRUE) +
# di-SNP nosig
geom_segment(data = hapi_plot %>% filter(sig=="nosig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "di-SNP"), lineend = hapi_nosig_lineend,linewidth = hapi_nosig_linewidth, alpha = hapi_nosig_alpha,show.legend	=TRUE) +
# hap sig
geom_segment(data = hap_plot %>% filter(sig=="sig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "Haplotype"), lineend = hap_sig_lineend,linewidth = hap_sig_linewidth,alpha = hap_sig_alpha, show.legend	=TRUE) +
# hap no sig
geom_segment(data = hap_plot %>% filter(sig=="nosig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "Haplotype"), lineend = hap_nosig_lineend,linewidth = hap_nosig_linewidth,alpha = hap_nosig_alpha,show.legend	=TRUE) +
# add significant line
geom_hline(
yintercept = -log10(sig_line), color = "red",
linetype = "dashed") +
# add chromosome separation line
geom_vline(
xintercept = axis_sep$boundaries, color = "grey",
linetype = "dotted", alpha = 0.5) +
# add x-axis label
scale_x_continuous(label = paste0("chr",axis_set$CHROM),breaks = axis_set$center) +
# set ylim
scale_y_continuous(expand = c(0, 0), limits = c(0, ylim)) +
# add legend
scale_color_manual(breaks = c("SNP", "di-SNP", "Haplotype"),values = c(snp_color, hapi_color,hap_color), name = "Data Type") +
# add plot title
ggtitle(paste0("Manhattan plot of SNP, di-SNP, Haplotype of ", T.Name)) +
# add x and y title
labs(x = "Chromsome", y = expression(-log[10]*P)) +
theme_minimal()
return(p)
}
dir<-"/Users/zswx/Documents/UCR/Jialab/GWAS2/"
setwd(dir)
library(MASS)
library(plyr)
library(dplyr)
library(tidyverse)
library(data.table)
library(ggpubr)
T.Name <- "LD"
test <- "WALD"
input_path_snp="data/arabidopsis/"
#output_path_snp="data/UCR_maize/original_Random_SNP_new/"
other_ruls_snp="_new"
input_path_hap="data/arabidopsis/"
#output_path_hap="data/UCR_maize/original_Random/"
output_path_all="data/arabidopsis/Random_newSNP_hap/"
other_ruls_hap=""
snp_file = paste0(input_path_snp,T.Name,".F",test,".SNP",other_ruls_snp,"_map.tsv")
hapi_file = paste0(input_path_hap,T.Name,".F",test,".HAP.Initial",other_ruls_hap,"_map.tsv")
hap_file = paste0(input_path_hap,T.Name,".F",test,".HAP.FINAL",other_ruls_hap,"_map.tsv")
sig_line <- 0.00000303561084131042
ylim<-9
p <- vis(T.Name, snp_file, hapi_file, hap_file, delim = "\t", sig_line=sig_line, ylim = ylim)
p1 <- p + theme(
plot.title = element_text(size = 20,hjust = 0.5),
axis.text.x = element_text(angle = 60, size = 15, vjust = 0.8),
axis.text.y = element_text(size = 15),
axis.title = element_text(size=20),
axis.line = element_line(linewidth = 0.8),
axis.ticks = element_line(linewidth = 0.8),
legend.position = "bottom",
legend.title = element_text(size=15),
legend.text = element_text(size=15),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
# save the file
pdf(paste0(output_path_all,T.Name,".F",test,".SNP.HAPI.HAP_manhattan_clear.pdf"), height=5, width=10);
print(p1);
dev.off()
p <- vis(T.Name, snp_file, hapi_file, hap_file, delim = "\t", sig_line=sig_line, ylim = ylim)
p1 <- p + theme(
plot.title = element_text(size = 20,hjust = 0.5),
axis.text.x = element_text(angle = 60, size = 15, vjust = 0.7),
axis.text.y = element_text(size = 15),
axis.title = element_text(size=20),
axis.line = element_line(linewidth = 0.8),
axis.ticks = element_line(linewidth = 0.8),
legend.position = "bottom",
legend.title = element_text(size=15),
legend.text = element_text(size=15),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
# save the file
pdf(paste0(output_path_all,T.Name,".F",test,".SNP.HAPI.HAP_manhattan_clear.pdf"), height=5, width=10);
print(p1);
dev.off()
sig_line
sig_line <- 0.05 / 166761
sig_line
snp <-read_delim(snp_file,delim = delim)
delim="\t"
snp <-read_delim(snp_file,delim = delim)
hapi <- read_delim(hapi_file,delim = delim)
hap <- read_delim(hap_file,delim = delim)
View(snp)
View(hapi)
？geom_segment
?geom_segment
?geom_point
?ggpubr
load_all()
library(devtools)
load_all()
setwd(GWAS2)
setwd("dir")
dir<-"/Users/zswx/Documents/UCR/Jialab/GWAS2/GWAS2"
setwd(dir)
load_all()
vis()
exists("vis", where = globalenv(), inherits = FALSE)
GG()
check()
check()
?pchisq
?ggplot
document()
warnings()
load_all()
?GG
check()
load_all()
?GG
?GG
?vis
use_package("data.table")
use_package("stats")
use_package("MASS")
use_package("plyr")
use_package("dplyr")
use_package("ggplot2")
use_package("ggpubr")
use_package("tidyverse","depend")
importFrom("stats", "optim", "pchisq")
?importFrom
??importFrom
library(roxygen2)
importFrom("stats", "optim", "pchisq")
?use_package
check()
importFrom("stats", "optim", "pchisq")
?mapvalues
load_all()
check()
?ginv
use_package("data.table","stats","MASS","plyr","dplyr","ggplot2","ggpubr")
use_package("data.table")
use_package("stats")
use_package("MASS")
use_package("plyr")
use_package("dplyr")
use_package("ggplot2")
use_package("ggpubr")
use_package("tidyverse","depend")
use_package("optim")
use_package("pchisq")
pchisq::fun()
check()
install()
library(pchisq)
devtools::install_github("dkahle/chi")
check()
use_testthat()
document()
document()
load_all()
library(testthat)
load_all()
install()
check()
use_test()
use_test("vis.R")
load_all()
use_test("GEN.CODE.R")
use_test("GG.R")
use_test("KIN.R")
use_test("ProF.R")
use_test("SEL.HAP.R")
use_test("SEL.SNP.R")
use_test("SUDO.GG.R")
load_all()
test()
load_all()
check()
load_all()
use_readme_rmd()
