print(paste0(eval(expression(L[0]))," = ",fn0))
print(paste0(mode(expression(L[0]))," = ",fn0))
expression(u, 2, u + 0:9)
rm(ex1)
print(paste0(expression(L*[0])," = ",fn0))
print(paste0(expression(L[0]*)," = ",fn0))
print(paste0(expression(L[0]*P)," = ",fn0))
print(paste0("L[0] = ",fn0))
print(paste0("L[1] = ",fn1))
# set working dirctory
dir<-"/Users/zswx/Documents/UCR/Jialab/GWAS2/"
#dir <- "/bigdata/jialab/shared/QiongJia/GWAS2/"
setwd(dir)
# load packages
print("loading required packages................")
library(tidyverse)
library(plyr)
library(dplyr)
library(MASS)
library(data.table)
library(qqman)
library(ggplot2)
#library(topr)
print("done")
print("Load phenotype................")
pheno <- read_tsv("data/UCR_maize/phe_filtered_complete.txt")
T.Name.All <- colnames(pheno)[4:12]
test="WALD"
input_path_snp="data/UCR_maize/original_Random_SNP_new/"
output_path_snp="data/UCR_maize/original_Random_SNP_new/"
other_ruls_snp="_original_Random_new"
input_path_hap="data/UCR_maize/original_Random/"
output_path_hap="data/UCR_maize/original_Random/"
output_path_all="data/UCR_maize/original_Random_newSNP_hap"
other_ruls_hap="_original_Random"
sig_line <- 0.05 / 166761
for(i in 1: length(T.Name.All)){
T.Name <- T.Name.All[i]
print(paste0("pheno type is ",T.Name))
# Example SNP data (replace this with your own SNP data)
snp <-read_tsv(paste0(input_path_snp,T.Name,".F",test,".SNP",other_ruls_snp,"_map.tsv"))
colnames(snp) <- c("CHROM","POS","P","ID")
#snp$CHROM <- paste0("chr",snp$CHROM)
snp_plot <- snp[which(snp$P!=0),]
# set.seed(2023)
# jagger_snp <- runif(nrow(snp), 1e-9,1e-8)
# snp_plot$P <- snp_plot$P + jagger_snp
snp_plot <- snp_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
snp_data_cum <- snp_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(POS)) %>%
mutate(bp_add = lag(cumsum(max_bp), default = 0)) %>%
dplyr::select(CHROM, bp_add)
snp_plot <- snp_plot %>%
inner_join(snp_data_cum, by = "CHROM") %>%
mutate(POS_cum = POS + bp_add)
snp_plot_sub <- snp_plot[which(snp_plot$CHROM %in% c(1,2)),]
# Example di-snp data (replace this with your own interval data)
hapi <- read_tsv(paste0(input_path_hap,T.Name,".F",test,".HAP.Initial",other_ruls_hap,"_map.tsv"))
hapi_plot <- hapi %>% dplyr::select(chr, start,end, p)
colnames(hapi_plot) <- c("CHROM","START","END","P")
#hapi_plot$CHROM <- paste0("chr",hapi_plot$CHROM)
hapi_plot <- hapi_plot[which(hapi_plot$P!=0),]
# set.seed(2022)
# jagger_disnp <- runif(nrow(hapi_plot), 1e-9,1e-8)
# hapi_plot$P <- hapi_plot$P + jagger_disnp
hapi_plot <- hapi_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
hapi_data_cum <- hapi_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(END)) %>%
mutate(bp_add = lag(cumsum(max_bp),default = 0)) %>%
dplyr::select(CHROM, bp_add)
hapi_plot <- hapi_plot %>%
inner_join(hapi_data_cum, by = "CHROM") %>%
mutate(START_cum = START + bp_add, END_cum = END + bp_add)
hapi_plot_sub <- hapi_plot[which(hapi_plot$CHROM %in% c(1,2)),]
#haplotype
hap <- read_tsv(paste0(input_path_hap,T.Name,".F",test,".HAP.FINAL",other_ruls_hap,"_map.tsv"))
hap_plot <- hap %>% dplyr::select(chr, start,end, p)
colnames(hap_plot) <- c("CHROM","START","END","P")
#hap_plot$CHROM <- paste0("chr",hap_plot$CHROM)
hap_plot <- hap_plot[which(hap_plot$P!=0),]
hap_plot <- hap_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
hap_data_cum <- hap_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(END)) %>%
mutate(bp_add = lag(cumsum(max_bp),default = 0)) %>%
dplyr::select(CHROM, bp_add)
hap_plot <- hap_plot %>%
inner_join(hap_data_cum, by = "CHROM") %>%
mutate(START_cum = START + bp_add, END_cum = END + bp_add)
hap_plot_sub <- hap_plot[which(hap_plot$CHROM %in% c(1,2)),]
# Calculate midpoints for chromosome regions
# axis_set <- snp_plot_sub |>
#   group_by(CHROM) |>
#   dplyr::summarize(center = mean(POS_cum))
axis_set <- snp_plot |>
group_by(CHROM) |>
dplyr::summarize(center = mean(POS_cum))
qq
}
dir<-"/Users/zswx/Documents/UCR/Jialab/GWAS2/"
#dir <- "/bigdata/jialab/shared/QiongJia/GWAS2/"
setwd(dir)
# load packages
print("loading required packages................")
library(tidyverse)
library(plyr)
library(dplyr)
library(MASS)
library(data.table)
library(qqman)
library(ggplot2)
#library(topr)
print("done")
print("Load phenotype................")
pheno <- read_tsv("data/UCR_maize/phe_filtered_complete.txt")
T.Name.All <- colnames(pheno)[4:12]
test="WALD"
input_path_snp="data/UCR_maize/original_Random_SNP_new/"
output_path_snp="data/UCR_maize/original_Random_SNP_new/"
other_ruls_snp="_original_Random_new"
input_path_hap="data/UCR_maize/original_Random/"
output_path_hap="data/UCR_maize/original_Random/"
output_path_all="data/UCR_maize/original_Random_newSNP_hap"
other_ruls_hap="_original_Random"
sig_line <- 0.05 / 166761
ylim<-10
for(i in 1: length(T.Name.All)){
T.Name <- T.Name.All[i]
print(paste0("pheno type is ",T.Name))
# Example SNP data (replace this with your own SNP data)
snp <-read_tsv(paste0(input_path_snp,T.Name,".F",test,".SNP",other_ruls_snp,"_map.tsv"))
colnames(snp) <- c("CHROM","POS","P","ID")
#snp$CHROM <- paste0("chr",snp$CHROM)
snp_plot <- snp[which(snp$P!=0),]
# set.seed(2023)
# jagger_snp <- runif(nrow(snp), 1e-9,1e-8)
# snp_plot$P <- snp_plot$P + jagger_snp
snp_plot <- snp_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
snp_data_cum <- snp_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(POS)) %>%
mutate(bp_add = lag(cumsum(max_bp), default = 0)) %>%
dplyr::select(CHROM, bp_add)
snp_plot <- snp_plot %>%
inner_join(snp_data_cum, by = "CHROM") %>%
mutate(POS_cum = POS + bp_add)
snp_plot_sub <- snp_plot[which(snp_plot$CHROM %in% c(1,2)),]
# Example di-snp data (replace this with your own interval data)
hapi <- read_tsv(paste0(input_path_hap,T.Name,".F",test,".HAP.Initial",other_ruls_hap,"_map.tsv"))
hapi_plot <- hapi %>% dplyr::select(chr, start,end, p)
colnames(hapi_plot) <- c("CHROM","START","END","P")
#hapi_plot$CHROM <- paste0("chr",hapi_plot$CHROM)
hapi_plot <- hapi_plot[which(hapi_plot$P!=0),]
# set.seed(2022)
# jagger_disnp <- runif(nrow(hapi_plot), 1e-9,1e-8)
# hapi_plot$P <- hapi_plot$P + jagger_disnp
hapi_plot <- hapi_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
hapi_data_cum <- hapi_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(END)) %>%
mutate(bp_add = lag(cumsum(max_bp),default = 0)) %>%
dplyr::select(CHROM, bp_add)
hapi_plot <- hapi_plot %>%
inner_join(hapi_data_cum, by = "CHROM") %>%
mutate(START_cum = START + bp_add, END_cum = END + bp_add)
hapi_plot_sub <- hapi_plot[which(hapi_plot$CHROM %in% c(1,2)),]
#haplotype
hap <- read_tsv(paste0(input_path_hap,T.Name,".F",test,".HAP.FINAL",other_ruls_hap,"_map.tsv"))
hap_plot <- hap %>% dplyr::select(chr, start,end, p)
colnames(hap_plot) <- c("CHROM","START","END","P")
#hap_plot$CHROM <- paste0("chr",hap_plot$CHROM)
hap_plot <- hap_plot[which(hap_plot$P!=0),]
hap_plot <- hap_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
hap_data_cum <- hap_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(END)) %>%
mutate(bp_add = lag(cumsum(max_bp),default = 0)) %>%
dplyr::select(CHROM, bp_add)
hap_plot <- hap_plot %>%
inner_join(hap_data_cum, by = "CHROM") %>%
mutate(START_cum = START + bp_add, END_cum = END + bp_add)
hap_plot_sub <- hap_plot[which(hap_plot$CHROM %in% c(1,2)),]
# Calculate midpoints for chromosome regions
# axis_set <- snp_plot_sub |>
#   group_by(CHROM) |>
#   dplyr::summarize(center = mean(POS_cum))
axis_set <- snp_plot |>
group_by(CHROM) |>
dplyr::summarize(center = mean(POS_cum))
# Create Manhattan plot with SNPs and intervals
#
p <- ggplot() +
# snp sig
geom_point(data = snp_plot %>% filter(sig=="sig"), aes(x = POS_cum, y = -log10(P),color = "SNP"), size = 8, alpha = 0.8,show.legend=TRUE) +
# snp no sig
geom_point(data = snp_plot %>% filter(sig=="nosig"), aes(x = POS_cum, y = -log10(P),color = "SNP"), size = 1, alpha = 0.3,show.legend	=TRUE) +
# di-SNP sig
geom_segment(data = hapi_plot %>% filter(sig=="sig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "di-SNP"), lineend = "round",linewidth = 5,show.legend	=TRUE) +
# di-SNP nosig
geom_segment(data = hapi_plot %>% filter(sig=="nosig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "di-SNP"), lineend = "round",linewidth = 1, alpha = 0.3,show.legend	=TRUE) +
# hap sig
geom_segment(data = hap_plot %>% filter(sig=="sig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "Haplotype"), lineend = "round",linewidth = 3,show.legend	=TRUE) +
# hap no sig
geom_segment(data = hap_plot %>% filter(sig=="nosig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "Haplotype"), lineend = "round",linewidth = 1,alpha = 0.3,show.legend	=TRUE) +
# add significant line
geom_hline(
yintercept = -log10(sig_line), color = "red",
linetype = "dashed") +
# add x-axis lable
scale_x_continuous(label = paste0("chr",axis_set$CHROM),breaks = axis_set$center) +
# set ylim
scale_y_continuous(expand = c(0, 0), limits = c(0, ylim)) +
# add legend
scale_color_manual(breaks = c("SNP", "di-SNP", "Haplotype"),values = c("#93b5cf", "#ffa60f","#f03752"), name = "Data Type") +
# add plot title
ggtitle(paste0("Manhattan plot of SNP, di-SNP, Haplotype of ", T.Name)) +
# add x and y title
labs(x = "Chromsome", y = expression(-log[10]*P)) +
theme_minimal() +
theme(
plot.title = element_text(size = 20,hjust = 0.5),
axis.text.x = element_text(angle = 60, size = 15, vjust = 0.8),
axis.text.y = element_text(size = 15),
axis.title = element_text(size=20),
legend.position = "bottom",
legend.title = element_text(size=15),
legend.text = element_text(size=15),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
# save the file
pdf(paste0(output_path_all,"_",T.Name,".FWALD.SNP.HAPI.HAP_manhattan_clear.pdf"), height=5, width=10);
print(p);
dev.off();
}
ylim<-12
# set working dirctory
dir<-"/Users/zswx/Documents/UCR/Jialab/GWAS2/"
#dir <- "/bigdata/jialab/shared/QiongJia/GWAS2/"
setwd(dir)
# load packages
print("loading required packages................")
library(tidyverse)
library(plyr)
library(dplyr)
library(MASS)
library(data.table)
library(qqman)
library(ggplot2)
#library(topr)
print("done")
print("Load phenotype................")
pheno <- read_tsv("data/UCR_maize/phe_filtered_complete.txt")
T.Name.All <- colnames(pheno)[4:12]
test="WALD"
input_path_snp="data/UCR_maize/original_Random_SNP_new/"
output_path_snp="data/UCR_maize/original_Random_SNP_new/"
other_ruls_snp="_original_Random_new"
input_path_hap="data/UCR_maize/original_Random/"
output_path_hap="data/UCR_maize/original_Random/"
output_path_all="data/UCR_maize/original_Random_newSNP_hap"
other_ruls_hap="_original_Random"
sig_line <- 0.05 / 166761
ylim<-12
for(i in 1: length(T.Name.All)){
T.Name <- T.Name.All[i]
print(paste0("pheno type is ",T.Name))
# Example SNP data (replace this with your own SNP data)
snp <-read_tsv(paste0(input_path_snp,T.Name,".F",test,".SNP",other_ruls_snp,"_map.tsv"))
colnames(snp) <- c("CHROM","POS","P","ID")
#snp$CHROM <- paste0("chr",snp$CHROM)
snp_plot <- snp[which(snp$P!=0),]
# set.seed(2023)
# jagger_snp <- runif(nrow(snp), 1e-9,1e-8)
# snp_plot$P <- snp_plot$P + jagger_snp
snp_plot <- snp_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
snp_data_cum <- snp_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(POS)) %>%
mutate(bp_add = lag(cumsum(max_bp), default = 0)) %>%
dplyr::select(CHROM, bp_add)
snp_plot <- snp_plot %>%
inner_join(snp_data_cum, by = "CHROM") %>%
mutate(POS_cum = POS + bp_add)
snp_plot_sub <- snp_plot[which(snp_plot$CHROM %in% c(1,2)),]
# Example di-snp data (replace this with your own interval data)
hapi <- read_tsv(paste0(input_path_hap,T.Name,".F",test,".HAP.Initial",other_ruls_hap,"_map.tsv"))
hapi_plot <- hapi %>% dplyr::select(chr, start,end, p)
colnames(hapi_plot) <- c("CHROM","START","END","P")
#hapi_plot$CHROM <- paste0("chr",hapi_plot$CHROM)
hapi_plot <- hapi_plot[which(hapi_plot$P!=0),]
# set.seed(2022)
# jagger_disnp <- runif(nrow(hapi_plot), 1e-9,1e-8)
# hapi_plot$P <- hapi_plot$P + jagger_disnp
hapi_plot <- hapi_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
hapi_data_cum <- hapi_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(END)) %>%
mutate(bp_add = lag(cumsum(max_bp),default = 0)) %>%
dplyr::select(CHROM, bp_add)
hapi_plot <- hapi_plot %>%
inner_join(hapi_data_cum, by = "CHROM") %>%
mutate(START_cum = START + bp_add, END_cum = END + bp_add)
hapi_plot_sub <- hapi_plot[which(hapi_plot$CHROM %in% c(1,2)),]
#haplotype
hap <- read_tsv(paste0(input_path_hap,T.Name,".F",test,".HAP.FINAL",other_ruls_hap,"_map.tsv"))
hap_plot <- hap %>% dplyr::select(chr, start,end, p)
colnames(hap_plot) <- c("CHROM","START","END","P")
#hap_plot$CHROM <- paste0("chr",hap_plot$CHROM)
hap_plot <- hap_plot[which(hap_plot$P!=0),]
hap_plot <- hap_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
hap_data_cum <- hap_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(END)) %>%
mutate(bp_add = lag(cumsum(max_bp),default = 0)) %>%
dplyr::select(CHROM, bp_add)
hap_plot <- hap_plot %>%
inner_join(hap_data_cum, by = "CHROM") %>%
mutate(START_cum = START + bp_add, END_cum = END + bp_add)
hap_plot_sub <- hap_plot[which(hap_plot$CHROM %in% c(1,2)),]
# Calculate midpoints for chromosome regions
# axis_set <- snp_plot_sub |>
#   group_by(CHROM) |>
#   dplyr::summarize(center = mean(POS_cum))
axis_set <- snp_plot |>
group_by(CHROM) |>
dplyr::summarize(center = mean(POS_cum))
# Create Manhattan plot with SNPs and intervals
#
p <- ggplot() +
# snp sig
geom_point(data = snp_plot %>% filter(sig=="sig"), aes(x = POS_cum, y = -log10(P),color = "SNP"), size = 8, alpha = 0.8,show.legend=TRUE) +
# snp no sig
geom_point(data = snp_plot %>% filter(sig=="nosig"), aes(x = POS_cum, y = -log10(P),color = "SNP"), size = 1, alpha = 0.3,show.legend	=TRUE) +
# di-SNP sig
geom_segment(data = hapi_plot %>% filter(sig=="sig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "di-SNP"), lineend = "round",linewidth = 5,show.legend	=TRUE) +
# di-SNP nosig
geom_segment(data = hapi_plot %>% filter(sig=="nosig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "di-SNP"), lineend = "round",linewidth = 1, alpha = 0.3,show.legend	=TRUE) +
# hap sig
geom_segment(data = hap_plot %>% filter(sig=="sig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "Haplotype"), lineend = "round",linewidth = 3,show.legend	=TRUE) +
# hap no sig
geom_segment(data = hap_plot %>% filter(sig=="nosig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "Haplotype"), lineend = "round",linewidth = 1,alpha = 0.3,show.legend	=TRUE) +
# add significant line
geom_hline(
yintercept = -log10(sig_line), color = "red",
linetype = "dashed") +
# add x-axis lable
scale_x_continuous(label = paste0("chr",axis_set$CHROM),breaks = axis_set$center) +
# set ylim
scale_y_continuous(expand = c(0, 0), limits = c(0, ylim)) +
# add legend
scale_color_manual(breaks = c("SNP", "di-SNP", "Haplotype"),values = c("#93b5cf", "#ffa60f","#f03752"), name = "Data Type") +
# add plot title
ggtitle(paste0("Manhattan plot of SNP, di-SNP, Haplotype of ", T.Name)) +
# add x and y title
labs(x = "Chromsome", y = expression(-log[10]*P)) +
theme_minimal() +
theme(
plot.title = element_text(size = 20,hjust = 0.5),
axis.text.x = element_text(angle = 60, size = 15, vjust = 0.8),
axis.text.y = element_text(size = 15),
axis.title = element_text(size=20),
legend.position = "bottom",
legend.title = element_text(size=15),
legend.text = element_text(size=15),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
# save the file
pdf(paste0(output_path_all,"_",T.Name,".FWALD.SNP.HAPI.HAP_manhattan_clear.pdf"), height=5, width=10);
print(p);
dev.off();
}
# set working dirctory
dir<-"/Users/zswx/Documents/UCR/Jialab/GWAS2/"
#dir <- "/bigdata/jialab/shared/QiongJia/GWAS2/"
setwd(dir)
# load packages
print("loading required packages................")
library(tidyverse)
library(plyr)
library(dplyr)
library(MASS)
library(data.table)
library(qqman)
library(ggplot2)
#library(topr)
print("done")
print("Load phenotype................")
pheno <- read_tsv("data/UCR_maize/phe_filtered_complete.txt")
T.Name.All <- colnames(pheno)[4:12]
test="WALD"
input_path_snp="data/UCR_maize/original_Random_SNP_new/"
output_path_snp="data/UCR_maize/original_Random_SNP_new/"
other_ruls_snp="_original_Random_new"
input_path_hap="data/UCR_maize/original_Random/"
output_path_hap="data/UCR_maize/original_Random/"
output_path_all="data/UCR_maize/original_Random_newSNP_hap/"
other_ruls_hap="_original_Random"
sig_line <- 0.05 / 166761
ylim<-12
for(i in 1: length(T.Name.All)){
T.Name <- T.Name.All[i]
print(paste0("pheno type is ",T.Name))
# Example SNP data (replace this with your own SNP data)
snp <-read_tsv(paste0(input_path_snp,T.Name,".F",test,".SNP",other_ruls_snp,"_map.tsv"))
colnames(snp) <- c("CHROM","POS","P","ID")
#snp$CHROM <- paste0("chr",snp$CHROM)
snp_plot <- snp[which(snp$P!=0),]
# set.seed(2023)
# jagger_snp <- runif(nrow(snp), 1e-9,1e-8)
# snp_plot$P <- snp_plot$P + jagger_snp
snp_plot <- snp_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
snp_data_cum <- snp_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(POS)) %>%
mutate(bp_add = lag(cumsum(max_bp), default = 0)) %>%
dplyr::select(CHROM, bp_add)
snp_plot <- snp_plot %>%
inner_join(snp_data_cum, by = "CHROM") %>%
mutate(POS_cum = POS + bp_add)
snp_plot_sub <- snp_plot[which(snp_plot$CHROM %in% c(1,2)),]
# Example di-snp data (replace this with your own interval data)
hapi <- read_tsv(paste0(input_path_hap,T.Name,".F",test,".HAP.Initial",other_ruls_hap,"_map.tsv"))
hapi_plot <- hapi %>% dplyr::select(chr, start,end, p)
colnames(hapi_plot) <- c("CHROM","START","END","P")
#hapi_plot$CHROM <- paste0("chr",hapi_plot$CHROM)
hapi_plot <- hapi_plot[which(hapi_plot$P!=0),]
# set.seed(2022)
# jagger_disnp <- runif(nrow(hapi_plot), 1e-9,1e-8)
# hapi_plot$P <- hapi_plot$P + jagger_disnp
hapi_plot <- hapi_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
hapi_data_cum <- hapi_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(END)) %>%
mutate(bp_add = lag(cumsum(max_bp),default = 0)) %>%
dplyr::select(CHROM, bp_add)
hapi_plot <- hapi_plot %>%
inner_join(hapi_data_cum, by = "CHROM") %>%
mutate(START_cum = START + bp_add, END_cum = END + bp_add)
hapi_plot_sub <- hapi_plot[which(hapi_plot$CHROM %in% c(1,2)),]
#haplotype
hap <- read_tsv(paste0(input_path_hap,T.Name,".F",test,".HAP.FINAL",other_ruls_hap,"_map.tsv"))
hap_plot <- hap %>% dplyr::select(chr, start,end, p)
colnames(hap_plot) <- c("CHROM","START","END","P")
#hap_plot$CHROM <- paste0("chr",hap_plot$CHROM)
hap_plot <- hap_plot[which(hap_plot$P!=0),]
hap_plot <- hap_plot %>% mutate(sig = ifelse(P<sig_line,"sig","nosig"))
hap_data_cum <- hap_plot %>%
group_by(CHROM) %>%
dplyr::summarise(max_bp = max(END)) %>%
mutate(bp_add = lag(cumsum(max_bp),default = 0)) %>%
dplyr::select(CHROM, bp_add)
hap_plot <- hap_plot %>%
inner_join(hap_data_cum, by = "CHROM") %>%
mutate(START_cum = START + bp_add, END_cum = END + bp_add)
hap_plot_sub <- hap_plot[which(hap_plot$CHROM %in% c(1,2)),]
# Calculate midpoints for chromosome regions
# axis_set <- snp_plot_sub |>
#   group_by(CHROM) |>
#   dplyr::summarize(center = mean(POS_cum))
axis_set <- snp_plot |>
group_by(CHROM) |>
dplyr::summarize(center = mean(POS_cum))
# Create Manhattan plot with SNPs and intervals
#
p <- ggplot() +
# snp sig
geom_point(data = snp_plot %>% filter(sig=="sig"), aes(x = POS_cum, y = -log10(P),color = "SNP"), size = 8, alpha = 0.8,show.legend=TRUE) +
# snp no sig
geom_point(data = snp_plot %>% filter(sig=="nosig"), aes(x = POS_cum, y = -log10(P),color = "SNP"), size = 1, alpha = 0.3,show.legend	=TRUE) +
# di-SNP sig
geom_segment(data = hapi_plot %>% filter(sig=="sig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "di-SNP"), lineend = "round",linewidth = 5,show.legend	=TRUE) +
# di-SNP nosig
geom_segment(data = hapi_plot %>% filter(sig=="nosig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "di-SNP"), lineend = "round",linewidth = 1, alpha = 0.3,show.legend	=TRUE) +
# hap sig
geom_segment(data = hap_plot %>% filter(sig=="sig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "Haplotype"), lineend = "round",linewidth = 3,show.legend	=TRUE) +
# hap no sig
geom_segment(data = hap_plot %>% filter(sig=="nosig"), aes(x = START_cum, xend = END_cum, y = -log10(P), yend = -log10(P),color = "Haplotype"), lineend = "round",linewidth = 1,alpha = 0.3,show.legend	=TRUE) +
# add significant line
geom_hline(
yintercept = -log10(sig_line), color = "red",
linetype = "dashed") +
# add x-axis lable
scale_x_continuous(label = paste0("chr",axis_set$CHROM),breaks = axis_set$center) +
# set ylim
scale_y_continuous(expand = c(0, 0), limits = c(0, ylim)) +
# add legend
scale_color_manual(breaks = c("SNP", "di-SNP", "Haplotype"),values = c("#93b5cf", "#ffa60f","#f03752"), name = "Data Type") +
# add plot title
ggtitle(paste0("Manhattan plot of SNP, di-SNP, Haplotype of ", T.Name)) +
# add x and y title
labs(x = "Chromsome", y = expression(-log[10]*P)) +
theme_minimal() +
theme(
plot.title = element_text(size = 20,hjust = 0.5),
axis.text.x = element_text(angle = 60, size = 15, vjust = 0.8),
axis.text.y = element_text(size = 15),
axis.title = element_text(size=20),
legend.position = "bottom",
legend.title = element_text(size=15),
legend.text = element_text(size=15),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
# save the file
pdf(paste0(output_path_all,T.Name,".FWALD.SNP.HAPI.HAP_manhattan_clear.pdf"), height=5, width=10);
print(p);
dev.off();
}
