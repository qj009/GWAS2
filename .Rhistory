dim(GENGEN.F[1:10,1:10scancel 1762675dim(GEN.GGdim(gg.onlyGEN.onlyGEN.onlygg[1:10,1:1Six_pSix_phe/Six_phe/Six_phe/Six_phe/Six_phe/
xx<-GEN.CODE(gg)
length(xx)
View(xx)
save(xx, file="data/arabidopsis/genotype_numeric_full.RData")
dim(xx.x)
xx.x <- lapply(xx,function(x)(x[,c(POS.noNA)]))
dim(xx.x)
length(xx.x)
View(xx.x)
View(Trait)
View(phe)
i=1
T.Name<-trait.name[i]
phe.x <- as.matrix(Trait[,which(colnames(Trait)==T.Name)])
View(phe.x)
POS.noNA <- which(phe.x[,1]!="NA")
phe_new<-phe.x[POS.noNA,]
phe_new
kinship <- lapply(kin,function(x)(x[c(POS.noNA),c(POS.noNA)]))
xx.x <- lapply(xx,function(x)(x[,c(POS.noNA)]))
View(xx.x)
GEN<-read.table(file="data/arabidopsis/arabidopsis_gen_LD_example.txt",sep="\t",header=T)
Y<-read.table(file="data/arabidopsis/arabidopsis_LD_example.txt",sep="\t",header=T)
T.Name = "LD"
# GEN.GG: chromatid input
GEN<-as.matrix(GEN)
GEN.GG <- GEN[,-(1:2)]
gg<-GG(GEN.GG)
# convert letter code to numberical code (-1: minor homo, 1: major homo, 0: hete)
xx<-GEN.CODE(gg)
identical(xx, xx.x)
identical(phe_new, Y[,1])
identical(xx[[1]], xx.x[[1]])
GEN.F <- read_delim("data/arabidopsis/Six_phe/genotype_full_for_GWAS2_test.txt", delim = "\t")
gg1 <- as.matrix(GEN.F[,-(1:2)])
sort(c(2*POS.noNA-1, 2*POS.noNA))
GX<- gg1[,sort(c(2*POS.noNA-1, 2*POS.noNA))]
identical(GX, gg)
gg[1:10,1:10]
GX[1:10,1:10]
gg1[1:10,1:10]
gen<-read_csv(file="data/arabidopsis/call_method_32.b",col_names=TRUE)
colnames(gen) <- gen[1,]
GEN1 <- gen[-1,]
m<-nrow(GEN1)
num<-matrix(0,m,2)
GEN1[1:10,1:10]
num[,1]<-apply(GEN1[,-(1:2)],1,function(x)length(unique(as.character(x))))
num[,2]<-apply(GEN1[,-(1:2)],1,function(x)sum(x=="-"))
NUM<-which(num[,1]==2 & num[,2]==0)
GEN1<-GEN1[NUM,]
GEN1<-as.matrix(GEN1)
dim(GEN1)
GEN1[1:10,1:10]
GEN[1:10,1:10]
GEN2 <- GEN1[,POS.noNA+2]
GEN2[1:10,1:10]
dim(GEN2)
GEN2 <- GEN1[,c(1,2,POS.noNA+2)]
dim(GEN2)
dim(GEN)
GEN2[1:10,1:10]
GEN[1:10,1:10]
View(gen)
GEN1 <- gen[-1,]
GEN1 <- as.matrix(GEN1)
View(GEN1)
num[,1]<-apply(GEN[,-(1:2)],1,function(x)length(unique(as.character(x))))
num[,1]<-apply(GEN1[,-(1:2)],1,function(x)length(unique(as.character(x))))
num[,2]<-apply(GEN1[,-(1:2)],1,function(x)sum(x=="-"))
NUM<-which(num[,1]==2 & num[,2]==0)
GEN1<-GEN1[NUM,]
GEN2 <- GEN1[,c(1,2,POS.noNA+2)]
GEN2[1:10,1:10]
GEN[1:10,1:10]
dim(gEN)
dim(GEN)
dim[GEN2]
dim(GEN2)
View(phe)
phe<-read.table(file="data/arabidopsis/phenotype_published_raw.tsv",sep="\t",header=T)
sample_order <- gen[1,-c(1,2)]
sample_order
sample_order <- as.numeric(gen[1,-c(1,2)])
sample_order
colnames(phe) <- gsub("X[1-9][0-9]{0,2}_","",colnames(phe))
trait.name <- c("LD","LDV","SD","0W","2W","4W")
Trait <- phe[,which(colnames(phe) %in% trait.name)]
View(Trait)
View(phe)
Trait <- phe[,c(1,which(colnames(phe) %in% trait.name))]
View(Trait)
Trait1 <- Trait %>% filter(ecotype.id == sample_order)
Trait1 <- Trait %>% dplyr::filter(ecotype.id == sample_order)
View(Trait1)
sample_order
Trait$ecotype.id
sample_order <- as.data.frame(as.numeric(gen[1,-c(1,2)]))
View(sample_order)
colnames(sample_order) <- "ecotype.id"
Trait1 <- sample_order %>% full_join(Trait,by="ecotype.id")
View(Trait1)
identical(gen[1,-c(1,2)], Trait1$ecotype.id)
gen[1,-c(1,2)]
identical(as.numeric(gen[1,-c(1,2)]), Trait1$ecotype.id)
rownames(Trait1) <- Trait1[,1]
write_tsv(Trait1, "data/arabidopsis/Six_phe/phenotype_six_for_GWAS2_test.tsv")
Trait <- read_tsv("data/arabidopsis/Six_phe/phenotype_six_for_GWAS2_test.tsv")
View(Trait)
setwd("/Users/zswx/Documents/UCR/Jialab/GWAS2/GWAS2")
setwd("/Users/zswx/Documents/UCR/Jialab/GWAS2")
ArabTrait <- read_tsv("data/arabidopsis/Six_phe/phenotype_six_for_GWAS2_test.tsv")
MaizeTrait <- read_tsv("data/UCR_maize/phe_original_complete.txt")
RiceTrait <-  read_tsv("data/ZhiwuZhang/Hybrid_phenotype.txt")
par(mfrow = c(4, 3))
for(i in 1:6){
hist(ArabTrait[,i+1], add = TRUE)
lines(density(ArabTrait[,i+1]), col = "red", lwd = 2)
}
i=1
i
hist(ArabTrait[,i+1], add = TRUE)
par(mfrow = c(1, 1))
par(mfrow = c(3, 2))
for(i in 1:6){
hist(ArabTrait[,i+1], add = TRUE)
lines(density(ArabTrait[,i+1]), col = "red", lwd = 2)
}
View(ArabTrait)
?hist
par(mfrow = c(1, 1))
par(mfrow = c(3, 2))
i=1
hist(ArabTrait[,i+1], add = TRUE,density=density(ArabTrait[,i+1])
)
par(mfrow = c(1, 1))
hist(ArabTrait[,i+1], add = TRUE,density=density(ArabTrait[,i+1]))
?lines
?density
par(mfrow = c(3, 2))
for(i in 1:6){
hist(ArabTrait[,i+1], add = TRUE)
lines(density(ArabTrait[,i+1],na.rm = TRUE), col = "red", lwd = 2)
}
for(i in 1:6){
hist(ArabTrait[,i+1], add = TRUE)
lines(density(ArabTrait[,i+1],na.rm = TRUE), col = "red", lwd = 2)
}
ArabTrait[,i+1]
density(ArabTrait[,i+1],na.rm = TRUE)
i=1
which(is.na(ArabTrait[,i+1])==FALSE)
trait <- ArabTrait[which(is.na(ArabTrait[,i+1])==FALSE),i+1]
par(mfrow = c(1, 1))
hist(trait, add = TRUE)
lines(trait), col = "red", lwd = 2)
lines(trait, col = "red", lwd = 2)
lines(density(trait), col = "red", lwd = 2)
lines(density(as.numeric(trait)), col = "red", lwd = 2)
lines(density(as.data.frame(trait)), col = "red", lwd = 2)
trait <- as.data.frame(ArabTrait[which(is.na(ArabTrait[,i+1])==FALSE),i+1])
hist(trait, add = TRUE)
lines(density(as.numeric(trait)), col = "red", lwd = 2)
View(trait)
class(triat)
class(trait)
trait
View(trait)
lines(density(as.matrix(trait)), col = "red", lwd = 2)
as.matrix(trait)
as.numeric(trait)
trait <- as.data.frame(ArabTrait[which(is.na(ArabTrait[,i+1])==FALSE),i+1])
as.numeric(trait)
as.numeric(t(trait))
lines(density(as.numeric(t(trait)), col = "red", lwd = 2)
)
lines(density(as.numeric(t(trait))), col = "red", lwd = 2)
density(as.numeric(t(trait))
)
par(mfrow = c(3, 2))
for(i in 1:6){
trait <- as.data.frame(ArabTrait[which(is.na(ArabTrait[,i+1])==FALSE),i+1])
hist(trait, add = TRUE)
lines(density(as.numeric(t(trait))), col = "red", lwd = 2)
}
par(mfrow = c(1, 1))
par(mfrow = c(3, 2))
for(i in 1:6){
trait <- as.data.frame(ArabTrait[which(is.na(ArabTrait[,i+1])==FALSE),i+1])
hist(trait)
lines(density(as.numeric(t(trait))), col = "red", lwd = 2)
}
for(i in 1:6) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(ArabTrait[, i + 1])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
hist(trait_vector, main = paste("Histogram of Column", i + 1))
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
i=1
trait_vector <- na.omit(ArabTrait[, i + 1])
length(trait_vector)
trait_vector
trait_vector <- na.omit(ArabTrait[[i + 1]])
trait_vector
for(i in 1:6) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(ArabTrait[[i + 1]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
hist(trait_vector, main = paste("Histogram of Column", i + 1))
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
par(mfrow = c(1, 1))
names(trait_vector)
for(i in 1:6) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(ArabTrait[[i + 1]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
hist(trait_vector, main = paste("Histogram of ", colnames(ArabTrait)[i + 1]))
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
par(mfrow = c(3, 2))
for(i in 1:6) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(ArabTrait[[i + 1]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
hist(trait_vector, main = paste("Histogram of ", colnames(ArabTrait)[i + 1]))
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
View(MaizeTrait)
par(mfrow = c(3, 3))
for(i in 1:9) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(MaizeTrait[[i + 3]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
hist(trait_vector, main = paste("Histogram of ", colnames(MaizeTrait)[i + 3]))
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
par(mfrow = c(3, 2))
for(i in 1:6) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(ArabTrait[[i + 1]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
# Create histogram with density values instead of counts
hist_obj = hist(trait_vector, probability = TRUE,  main = paste("Histogram of ", colnames(ArabTrait)[i + 1]), xlab = "", ylab = "")
# Add density line
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
par(mfrow = c(3, 3))
for(i in 1:9) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(MaizeTrait[[i + 3]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
hist_obj = hist(trait_vector, probability = TRUE,  main = paste("Histogram of ", colnames(MaizeTrait)[i + 3]), xlab = "", ylab = "")
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
for(i in 1:12) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(RiceTrait[[i + 3]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
hist_obj = hist(trait_vector, probability = TRUE,  main = paste("Histogram of ", colnames(RiceTrait)[i + 3]), xlab = "", ylab = "")
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
par(mfrow = c(4, 3))
for(i in 1:12) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(RiceTrait[[i + 3]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
hist_obj = hist(trait_vector, probability = TRUE,  main = paste("Histogram of ", colnames(RiceTrait)[i + 3]), xlab = "", ylab = "")
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
for(i in 1:12) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(RiceTrait[[i + 3]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
hist_obj = hist(trait_vector, probability = TRUE,  main = paste("Histogram of ", colnames(RiceTrait)[i + 3]), xlab = "", ylab = "")
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
par(mfrow = c(4, 3))
for(i in 1:12) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(RiceTrait[[i + 3]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
hist_obj = hist(trait_vector, probability = TRUE,  main = paste("Histogram of ", colnames(RiceTrait)[i + 3]), xlab = "", ylab = "")
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
par(mfrow = c(3, 2))
for(i in 1:6) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(ArabTrait[[i + 1]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
# Create histogram with density values instead of counts
hist_obj = hist(trait_vector, probability = TRUE, xlab = paste("Histogram of ", colnames(ArabTrait)[i + 1]), ylab = "")
# Add density line
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
for(i in 1:6) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(ArabTrait[[i + 1]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
# Create histogram with density values instead of counts
hist_obj = hist(trait_vector, probability = TRUE, xlab = paste("Histogram of ", colnames(ArabTrait)[i + 1]), ylab = "")
# Add density line
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
for(i in 1:6) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(ArabTrait[[i + 1]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
# Create histogram with density values instead of counts
hist_obj = hist(trait_vector, probability = TRUE, xlab = colnames(ArabTrait)[i + 1], ylab = "", main=NULL)
# Add density line
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
for(i in 1:6) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(ArabTrait[[i + 1]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
# Create histogram with density values instead of counts
hist_obj = hist(trait_vector, probability = TRUE, xlab = colnames(ArabTrait)[i + 1], ylab = "Probability", main=NULL)
# Add density line
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
pdf(file="data/arabidopsis/Six_phe/ArabTrait_distribution", width = 5, height = 5)
par(mfrow = c(3, 2))
for(i in 1:6) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(ArabTrait[[i + 1]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
# Create histogram with density values instead of counts
hist_obj = hist(trait_vector, probability = TRUE, xlab = colnames(ArabTrait)[i + 1], ylab = "Probability", main=NULL)
# Add density line
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
dev.off()
pdf(file="data/arabidopsis/Six_phe/ArabTrait_distribution.pdf", width = 5, height = 5)
par(mfrow = c(3, 2))
for(i in 1:6) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(ArabTrait[[i + 1]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
# Create histogram with density values instead of counts
hist_obj = hist(trait_vector, probability = TRUE, xlab = colnames(ArabTrait)[i + 1], ylab = "Probability", main=NULL)
# Add density line
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
dev.off()
pdf(file="data/UCR_maize/MaizeTrait_distribution.pdf", width = 8, height = 5)
par(mfrow = c(3, 3))
for(i in 1:9) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(MaizeTrait[[i + 3]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
hist_obj = hist(trait_vector, probability = TRUE, xlab = colnames(MaizeTrait)[i + 3], ylab = "Probability", main=NULL)
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
dev.off()
pdf(file="data/ZhiwuZhang/RiceTrait_distribution.pdf", width = 10, height = 5)
par(mfrow = c(4, 3))
for(i in 1:12) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(RiceTrait[[i + 3]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
hist_obj = hist(trait_vector, probability = TRUE, xlab = colnames(RiceTrait)[i + 3], ylab = "Probability", main=NULL)
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
dev.off()
pdf(file="data/ZhiwuZhang/RiceTrait_distribution.pdf", width = 10, height = 10)
par(mfrow = c(4, 3))
for(i in 1:12) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(RiceTrait[[i + 3]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
hist_obj = hist(trait_vector, probability = TRUE, xlab = colnames(RiceTrait)[i + 3], ylab = "Probability", main=NULL)
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
dev.off()
pdf(file="data/UCR_maize/MaizeTrait_distribution.pdf", width = 8, height = 5)
par(mfrow = c(3, 3))
for(i in 1:9) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(MaizeTrait[[i + 3]])
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
hist_obj = hist(trait_vector, probability = TRUE, xlab = colnames(MaizeTrait)[i + 3], ylab = "Probability", main=NULL)
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
dev.off()
par(mfrow = c(1, 1))
pdf(file="data/arabidopsis/Six_phe/ArabTrait_log10_distribution.pdf", width = 5, height = 5)
par(mfrow = c(3, 2))
for(i in 1:6) {
# Extract the column as a vector, removing NAs
trait_vector <- na.omit(ArabTrait[[i + 1]])
trait_vector <- log10(trait_vector)
# Check if there is enough data to plot
if (length(trait_vector) > 1) {
# Create histogram with density values instead of counts
hist_obj = hist(trait_vector, probability = TRUE, xlab = paste0("log10( ",colnames(ArabTrait)[i + 1]," )"), ylab = "Probability", main=NULL)
# Add density line
lines(density(trait_vector), col = "red", lwd = 2)
} else {
plot.new()
title(main = paste("Not enough data in Column", i + 1))
}
}
dev.off()
